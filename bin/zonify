#!/usr/bin/env ruby
libdir = File.expand_path("#{File.dirname(__FILE__)}/../lib")
$LOAD_PATH.unshift(libdir) if File.directory?(libdir)
USAGE =<<USAGE
 USAGE: zonify ... (-h|-[?]|--help)? ...
        zonify ec2 <rewrite rules>* > zone.ec2.yaml
        zonify r53 <domain> > zone.r53.yaml
        zonify ec2/r53 <domain> <rewrite rules>* > changes.yaml
        zonify diff zone.r53.yaml zone.ec2.yaml > changes.yaml
        zonify rewrite <rewrite rules>* < zone.ec2.yaml
        zonify summarize < changes.yaml
        zonify apply < changes.yaml
        zonify sync (--confirm)? <rewrite rules>*
USAGE

require 'readline'
require 'yaml'

require 'rubygems'
require 'right_aws'

require 'zonify'


class CLIAWS
  def initialize(args=[nil, nil, {:logger=>Logger.new('/dev/null')}])
    @args = args
  end
  def respond_to?(sym)
    aws.respond_to?(sym)
  end
  def method_missing(sym, *args, &block)
    begin
      aws.send(sym, *args, &block)
    rescue RightAws::AwsError => e
      abort "AWS error: #{e}"
    end
  end
  def aws
    @aws ||= Zonify::AWS.create(*@args)
  end
end

def check_name(suffix)
  abort 'No domain given.' unless suffix
  unless suffix.split('.').all?{|s| s.empty? or Zonify::LDH_RE.match(s) }
    abort "Not a conventional, LDH domain name: #{suffix}"
  end
end

def display(changes)
  if changes.empty?
    'No changes; nothing to do.'
  else
    summary = changes.inject({}) do |acc, change|
      acc[change[:name]] ||= []
      acc[change[:name]]  << change[:action]
      acc
    end.map do |k, v|
      case v
      when [:delete, :create] then [k, 'replace']
      when [:delete]          then [k, 'delete']
      when [:create]          then [k, 'create']
      end
    end.sort
    len = summary.map{|name, op| [name.length, 64].min }.max
    formatted = summary.map{|name, op| name.ljust(len) + "  --->  " + op }
    formatted.unshift("There are #{summary.length} changes.").join("\n")
  end
end

def yaml_with_default(source, default)
  s = source.read.rstrip
  unless s.empty?
    yaml = YAML.load(s)
    abort 'Bad YAML parse.' unless yaml
    yaml
  else
    default
  end
end

def normed_with_mappings(mapping_args, suffix, records)
  mappings = mapping_args.map{|s| Zonify::Mappings.parse(s) }
  abort 'Bad mapping parse.' if mappings.any?{|r| r.nil? }
  mappings.each{|k, v| ([k] + v).each{|s| check_name(s) } }
  clipped  = Zonify::Mappings.rewrite(records, [[suffix,['.']]])
  mapped   = Zonify::Mappings.rewrite(clipped, mappings)
  restored = Zonify::Mappings.rewrite(mapped, [['.',[suffix]]])
  Zonify.normalize(restored)
end

def confirm_dialogue
  # Restore terminal state on SIGINT. Needed due to use of Readline.
  stty_save = `stty -g 2>/dev/null`.chomp
  trap('INT') do
    system('stty', stty_save)
    exit
  end
  perform = false
  msg = 'Perform changes?'
  while line = Readline.readline("#{msg} [Y/n]  ")
    case line
    when /^(n|no)$/i
      perform = false
      STDERR.puts 'Abandoning changes...'
      break
    when /^(y|yes|)$/i
      perform = true
      STDERR.puts 'Initiating changes...'
      break
    when nil
      perform = false
      break
    else
      msg = "Perform changes? Please answer with 'y' or 'n'."
    end
  end
  perform
end

if __FILE__ == $0
  if ARGV.any?{|arg| %w| help -h --help -? |.member?(arg) }
    puts USAGE
    exit
  end
  confirm = [ARGV.delete("-c"), ARGV.delete("--confirm")].any?
  quiet = [ARGV.delete("-q"), ARGV.delete("--quiet")].any?
  netlogging = [ARGV.delete("-n"), ARGV.delete("--net")].any?
  aws = netlogging ? CLIAWS.new([nil, nil, {:logger=>Logger.new(STDERR)}]) :
                     CLIAWS.new
  case ARGV[0]
  when 'ec2'
    data = aws.ec2_zone
    mappings = (ARGV[1..-1] or [])
    mapped = normed_with_mappings(mappings, '.', data)
    STDOUT.write Zonify::YAML.format(mapped, '.')
  when 'r53'
    suffix = ARGV[1]
    check_name(suffix)
    zone, data = aws.route53_zone(suffix)
    if zone and data
      STDOUT.write Zonify::YAML.format(data, suffix)
    else
      STDERR.puts 'No zone found; outputting nonce zone.'
      STDOUT.write Zonify::YAML.format({}, '.')
    end
  when 'diff'
    suffix, old_records = Zonify::YAML.read(File.read(ARGV[1]))
    _, new_records = Zonify::YAML.read(File.read(ARGV[2]))
    qualified = Zonify::Mappings.rewrite(new_records, [['.',[suffix]]])
    changes = Zonify.diff(qualified, old_records)
    STDERR.puts(display(changes)) unless quiet
    STDOUT.write(Zonify::YAML.trim_lines(YAML.dump(changes)))
  when 'sync'
    suffix = ARGV[1]
    check_name(suffix)
    new_records = aws.ec2_zone
    mappings = (ARGV[2..-1] or [])
    mapped = normed_with_mappings(mappings, suffix, new_records)
    _, old_records = aws.route53_zone(suffix)
    changes = Zonify.diff(mapped, old_records)
    STDERR.puts(display(changes)) if confirm or not quiet
    perform = if confirm and not changes.empty?
                confirm_dialogue
              else
                true
              end
    aws.apply(changes) if perform
  when 'ec2/r53'
    suffix = ARGV[1]
    check_name(suffix)
    new_records = aws.ec2_zone
    mappings = (ARGV[2..-1] or [])
    mapped = normed_with_mappings(mappings, suffix, new_records)
    _, old_records = aws.route53_zone(suffix)
    changes = Zonify.diff(mapped, old_records)
    STDERR.puts(display(changes)) unless quiet
    STDOUT.write(Zonify::YAML.trim_lines(YAML.dump(changes)))
  when 'summarize'
    handle = ARGV[1] ? File.open(ARGV[1]) : STDIN
    changes = yaml_with_default(handle, [])
    STDOUT.puts(display(changes))
  when 'apply'
    handle = ARGV[1] ? File.open(ARGV[1]) : STDIN
    changes = yaml_with_default(handle, [])
    STDERR.puts "" unless changes
    STDERR.puts(display(changes)) if confirm or not quiet
    perform = if confirm and not changes.empty?
                confirm_dialogue
              else
                true
              end
    aws.apply(changes) if perform
  when 'rewrite'
    suffix, records = Zonify::YAML.read(STDIN)
    mappings = (ARGV[1..-1] or [])
    abort 'No mappings given.' if mappings.empty?
    mapped = normed_with_mappings(mappings, suffix, records)
    STDOUT.write(Zonify::YAML.format(mapped, suffix))
  else
    abort 'Argument error.'
  end
end

